#####################################################################
#   Macros
#####################################################################

[gcode_macro PARK_CENTER]
gcode:
    {% set th = printer.toolhead %}
    {% set z_target = [th.position.z, 30]|max %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z{z_target} F10000


[gcode_macro PARK_FRONT]
gcode:
    {% set th = printer.toolhead %}
    {% set z_target = [th.position.z, 30]|max %}
    G0 X{th.axis_maximum.x - 10} Y0 Z{z_target} F10000


[gcode_macro PARK_BACK]
gcode:
    {% set th = printer.toolhead %}
    {% set z_target = [th.position.z, 30]|max %}
    G0 X{th.axis_maximum.x // 2} Y{th.axis_maximum.y - 3} Z{z_target} F10000


[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32


[gcode_macro SLEEP]
gcode:
    TURN_OFF_HEATERS
    M84
    SET_LED LED=hotend_rgb RED=0 GREEN=0 BLUE=0 WHITE=0
    LIGHT_OFF


[gcode_macro PRINT_START]
gcode:
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("0")|int %}
    {% set x_center = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_center = printer.toolhead.axis_maximum.y|float / 2 %}

    LIGHT_ON
    M140 S{target_bed}              ; start heating bed

    BED_MESH_CLEAR

    LED_HOMING
    G90                             ; absolute positioning
    G28                             ; home all axes

    RESPOND MSG="Heating bed..."
    LED_HEATING_BED
    M190 S{target_bed}              ; heat bed

    {% if target_chamber > 5, %}
        LED_HEATING_CHAMBER
        RESPOND MSG="Waiting for chamber to reach {target_chamber}C..."
        EXHAUST_FAN_LOW
        M104 S150                   ; start heating nozzle for extra heat
        M106 S255                   ; turn on part fan
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
        M106 S0                     ; turn fan back off
    {% else %}
        EXHAUST_FAN_OFF
    {% endif %}

    LED_HEATING_EXTRUDER
    RESPOND MSG="Heating nozzle for QGL..."
    M109 S150                       ; heat nozzle to 150 for more accurate z probing

    LED_HOMING
    QUAD_GANTRY_LEVEL               ; QGL
    G28                             ; home again after QGL

    BED_MESH_CALIBRATE              ; bed mesh (adaptive w/ KAMP)

    LED_HEATING_EXTRUDER
    RESPOND MSG="Heating nozzle..."
    M109 S{target_extruder}         ; heat nozzle to printing temperature

    LED_PRINTING
    LINE_PURGE


[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    {% if printer["fan_generic exhaust_fan"].speed > 0 %}
        EXHAUST_FAN_HIGH
    {% endif %}
    
    BED_MESH_CLEAR

    LED_IDLE

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0


[gcode_macro BELT_TENSION]
gcode:
    {% set axis = params.AXIS | default("H") | upper %}
    {% set speed = params.SPEED | default(250) %}

    {% set th = printer.toolhead %}
    {% set feed = speed * 60 %}

    SAVE_GCODE_STATE NAME=STATE_BELT_TENSION_H

    G90 ; absolute positioning
    {% if axis == "V" or axis == "Z" %}
        G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z5 F{feed}
        G0 Z150
        G0 Z50
    {% else %}
        G0 Z50 F{feed}
        G0 X20 Y20
        G0 X20 Y{th.axis_maximum.y - 20}
        G0 X{th.axis_maximum.x - 20} Y{th.axis_maximum.y - 20}
        G0 X{th.axis_maximum.x - 20} Y20
        G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2}
    {% endif %}

    RESTORE_GCODE_STATE NAME=STATE_BELT_TENSION_H MOVE=0


[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}


[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}